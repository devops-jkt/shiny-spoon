variables:
  IMAGE_NAME: '${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}'
  IMAGE_TAG: '${CI_PROJECT_NAME}.${CI_COMMIT_SHORT_SHA}'

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

stages:
  - compile
  - build
  - test
  - deploy

compile binary:
  stage: compile
  image: 'golang:1.22.3-bullseye'
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "push"
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED || $CI_COMMIT_REF_PROTECTED
  variables:
    GO111MODULE: 'on'
    CGO_ENABLED: 0
    GOOS: 'linux'
  artifacts:
    untracked: false
    when: on_success
    access: all
    expire_in: '30 days'
    name: 'build_output'
    paths:
      - 'tmp'
  before_script:
    - go mod tidy
  script:
    - go build -o tmp/binary .

run unit test:
  stage: test
  needs:
    - job: 'compile binary'
      artifacts: true
  script:
    - |
      echo "Unit Test Passed!"

run integration test:
  stage: test
  needs:
    - job: 'compile binary'
      artifacts: true
  script:
    - |
      echo "Integration Test Passed!"

run feature test:
  stage: test
  needs:
    - job: 'compile binary'
      artifacts: true
  script:
    - |
      echo "Feature Test Passed!"

build and push docker image:
  stage: build
  needs:
    - job: 'compile binary'
      artifacts: true
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
  variables:
    DOCKER_TLS_CERTDIR: '/certs'
  before_script:
    - echo $CI_JOB_TOKEN | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - echo "$CI_REGISTRY $CI_REGISTRY_USER $CI_REGISTRY_IMAGE"
  script:
    - docker build --no-cache -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA -t $CI_REGISTRY_IMAGE .
    - docker push $CI_REGISTRY_IMAGE --all-tags

deploy to server:
  allow_failure: true
  when: manual
  stage: deploy
  needs: ['build and push docker image']
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
  variables:
    COMMANDS:
      "echo $CI_JOB_TOKEN | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin &&
      docker ps -aqf name=$CI_PROJECT_NAME | xargs docker rm -f 2>/dev/null || true &&
      docker run --name $CI_PROJECT_NAME \
      --env APP_VERSION=$IMAGE_TAG \
      --env-file /tmp/$CI_PROJECT_NAME \
      --volume /etc/localtime:/etc/localtime:ro \
      --volume /etc/ssl/certs:/etc/ssl/certs:ro \
      --publish $PUBLISH_PORT:8080 \
      --restart unless-stopped \
      --pull=always \
      --detach \
      $CI_REGISTRY_IMAGE"
  before_script:
    - chmod 400 $SSH_PRIVATE_KEY
    - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY -P $SERVER_PORT $ENV_FILE root@$SERVER_IP:/tmp/$CI_PROJECT_NAME
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY -p $SERVER_PORT root@$SERVER_IP $COMMANDS
  after_script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY -p $SERVER_PORT root@$SERVER_IP "rm -v /tmp/$CI_PROJECT_NAME"
